import*as THREE from"three";import{camera,scene,renderer}from"./basics";import{getGUIforLights}from"./utils";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("green","purple","orange");const material=new THREE.MeshStandardMaterial,lightParamsDir={position:{x:40,y:2.5,z:8}},lightParamsPoint={position:{x:4,y:2,z:3}};renderer.shadowMap.enabled=!0,renderer.shadowMap.type=THREE.PCFSoftShadowMap;const ambientLight=new THREE.AmbientLight("white",.2),directionalLight=new THREE.DirectionalLight("white",.8),pointLight=new THREE.PointLight("orange",.8);pointLight.castShadow=!0,directionalLight.castShadow=!0;const cameraHelper=new THREE.CameraHelper(camera),helperLight=new THREE.CameraHelper(pointLight.shadow.camera);scene.add(helperLight),getGUIforLights(lightParamsDir,"DIRECTIONAL LIGHT",directionalLight),getGUIforLights(lightParamsPoint,"POINT LIGHT",pointLight),scene.add(directionalLight),scene.add(ambientLight),scene.add(pointLight);const planeG=new THREE.PlaneGeometry(50,50),plane=new THREE.Mesh(planeG,material);material.side=THREE.DoubleSide,plane.receiveShadow=!0,plane.rotateX(-1.5),plane.position.set(0,.5,0);const sphereG=new THREE.SphereGeometry(3,32,32),sphere=new THREE.Mesh(sphereG,material);sphere.castShadow=!0,sphere.position.set(0,5,0),scene.add(sphere),scene.add(plane);const controls=new OrbitControls(camera,renderer.domElement);window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){clock.getElapsedTime(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();