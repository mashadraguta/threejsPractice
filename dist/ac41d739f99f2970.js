import*as THREE from"three";import{camera,scene,canvas,renderer}from"./basics";import{changeObjPos}from"./utils";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GUI}from"dat.gui";const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("red","yellow","blue"),scene.add(axesHelper);const gui=new GUI,controls=new OrbitControls(camera,renderer.domElement),initParamsALight={position:{x:3,y:3,z:15},intensity:.5},initParamsBMesh={position:{x:3,y:3,z:15}},loader=new THREE.TextureLoader,cartoonMat=loader.load("/textures/matcaps/1.png");loader.setPath("/textures/particles/");const mat1=loader.load("1.png"),mat2=loader.load("2.png"),mat3=loader.load("3.png"),mat4=loader.load("4.png"),mat5=loader.load("5.png"),mat6=loader.load("6.png"),mat7=loader.load("7.png"),mat8=loader.load("8.png"),mat9=loader.load("9.png"),mat10=loader.load("10.png"),mat11=loader.load("11.png"),mat12=loader.load("12.png"),ambientLight=new THREE.PointLight("yellow",initParamsALight.intensity);ambientLight.position.set(initParamsALight.position.x,initParamsALight.position.y,initParamsALight.position.z),changeObjPos(ambientLight,initParamsALight,gui,"point Light"),scene.add(ambientLight);const covrig=new THREE.Mesh(new THREE.TorusGeometry,new THREE.MeshToonMaterial({alphaMap:cartoonMat,color:"green"}));covrig.position.set(0,2,2);const sphereG=new THREE.SphereGeometry(2.5,32,32),torusG=new THREE.TorusGeometry,boxGeo=new THREE.BoxGeometry(5,5,5),count=100,bufferArrPos=new Float32Array(300),bufferArrColor=new Float32Array(300),bufferGeom=new THREE.BufferGeometry;for(let e=0;e<300;e++)bufferArrPos[e]=THREE.MathUtils.randFloatSpread(20),bufferArrColor[e]=THREE.MathUtils.randFloatSpread(10),bufferGeom.setAttribute("position",new THREE.BufferAttribute(bufferArrPos,3)),bufferGeom.setAttribute("color",new THREE.BufferAttribute(bufferArrColor,3));const newMeshRandom=new THREE.Points(bufferGeom,new THREE.PointsMaterial({alphaMap:mat4,transparent:!0,vertexColors:!0}));scene.add(newMeshRandom),window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){clock.getElapsedTime(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();