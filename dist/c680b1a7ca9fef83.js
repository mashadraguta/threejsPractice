import*as THREE from"three";import{camera,scene,renderer}from"./basics";import{getGUIforLights}from"./utils";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GUI}from"dat.gui";renderer.shadowMap.enabled=!1;const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("green","purple","orange"),scene.add(axesHelper);const bakedShadowTexture=(new THREE.TextureLoader).load("textures/bakedShadow.jpg"),aoMapShadowTexture=(new THREE.TextureLoader).load("textures/simpleShadow.jpg"),lambertMaterial=new THREE.MeshLambertMaterial({color:"black"}),standardMaterial=new THREE.MeshStandardMaterial;lambertMaterial.alphaMap=aoMapShadowTexture,lambertMaterial.transparent=!0;const guiControls=new GUI,texturesFolder=guiControls.addFolder("AO MAP INTENSITY"),shadowFolder=guiControls.addFolder("ENABLE/DISABLE SHADOWS");shadowFolder.add(renderer.shadowMap,"enabled"),texturesFolder.add(lambertMaterial,"aoMapIntensity").min(.1).max(10).step(.01);const lightParamsDirectional={position:{x:0,y:10,z:0},radius:1.45,near:.1,far:2e3},lightParamsPoint={position:{x:4,y:6,z:3},radius:.1},lightParamsSpot={position:{x:-4,y:32,z:3},radius:3,near:.1,far:2e3,fov:50,distance:.2,angle:.1*Math.PI},ambientLight=new THREE.AmbientLight("white",.2),directionalLight=new THREE.DirectionalLight("white",.5),pointLight=new THREE.PointLight("orange",.7),spotLight=new THREE.SpotLight("white",.9);pointLight.visible=!1,directionalLight.visible=!0,spotLight.visible=!1,pointLight.castShadow=!0,spotLight.castShadow=!0,directionalLight.castShadow=!0;const d=10,directionalShadow=directionalLight.shadow;directionalShadow.camera.left=-d,directionalShadow.camera.right=d,directionalShadow.camera.bottom=-d,directionalShadow.camera.top=d,directionalShadow.camera.near=lightParamsDirectional.near,directionalShadow.camera.far=lightParamsDirectional.far,directionalShadow.radius=lightParamsDirectional.radius,directionalShadow.mapSize.width=1024,directionalShadow.mapSize.height=1024;const spotShadow=spotLight.shadow;spotShadow.camera.near=lightParamsSpot.near,spotShadow.camera.far=lightParamsSpot.far,spotShadow.camera.fov=lightParamsSpot.fov,spotShadow.radius=lightParamsSpot.radius,spotShadow.mapSize.width=1024,spotShadow.mapSize.height=1024,spotLight.angle=lightParamsSpot.angle,spotLight.near=lightParamsSpot.near,spotLight.far=lightParamsSpot.far,spotLight.fov=lightParamsSpot.fov;const pointShadow=pointLight.shadow;pointShadow.radius=lightParamsPoint.radius;const helperShadowDir=new THREE.CameraHelper(directionalShadow.camera),helperShadowPoint=new THREE.CameraHelper(pointShadow.camera),helperShadowSpot=new THREE.CameraHelper(spotShadow.camera),helperLightDirectional=new THREE.DirectionalLightHelper(directionalLight),helperLightPoint=new THREE.PointLightHelper(pointLight),helperLightSpot=new THREE.SpotLightHelper(spotLight);scene.add(helperLightDirectional),scene.add(helperLightPoint),scene.add(helperLightSpot),helperShadowDir.visible=!1,helperShadowPoint.visible=!1,helperShadowSpot.visible=!1,helperLightDirectional.visible=!1,helperLightPoint.visible=!1,helperLightSpot.visible=!1,scene.add(helperShadowDir),scene.add(helperShadowPoint),scene.add(helperShadowSpot),getGUIforLights(lightParamsDirectional,"DIRECTIONAL LIGHT",directionalLight,helperLightDirectional,helperShadowDir,guiControls),getGUIforLights(lightParamsPoint,"POINT LIGHT",pointLight,helperLightPoint,helperShadowPoint,guiControls),getGUIforLights(lightParamsSpot,"SPOT LIGHT",spotLight,helperLightSpot,helperShadowSpot,guiControls),scene.add(directionalLight),directionalLight.position.set(8,6,15),scene.add(directionalLight.target),scene.add(ambientLight),scene.add(pointLight),spotLight.target.position.set(0,5,0),scene.add(spotLight.target),scene.add(spotLight);const sphereShadow=new THREE.Mesh(new THREE.PlaneGeometry(6,6),new THREE.MeshBasicMaterial({color:"black",alphaMap:aoMapShadowTexture,transparent:!0}));sphereShadow.position.set(0,1,1),sphereShadow.geometry.rotateX(-Math.PI/2);const sphereG=new THREE.SphereGeometry(2,32,32);sphereG.setAttribute("uv2",new THREE.BufferAttribute(sphereG.attributes.uv.array,2));const sphere=new THREE.Mesh(sphereG,standardMaterial);sphere.castShadow=!0,sphere.position.set(-20,20,0),scene.add(sphere),scene.add(sphereShadow);const torusG=new THREE.TorusGeometry;torusG.setAttribute("uv2",new THREE.BufferAttribute(torusG.attributes.uv.array,2));const torus=new THREE.Mesh(torusG,standardMaterial);torus.castShadow=!0,torus.position.set(-5,5,0);const cubeG=new THREE.BoxGeometry(2,2,2);cubeG.setAttribute("uv2",new THREE.BufferAttribute(cubeG.attributes.uv.array,2));const cube=new THREE.Mesh(cubeG,standardMaterial);cube.castShadow=!0,cube.position.set(5,5,0);const planeG=new THREE.PlaneGeometry(50,50);planeG.setAttribute("uv2",new THREE.BufferAttribute(planeG.attributes.uv.array,2));const plane=new THREE.Mesh(planeG,standardMaterial);plane.receiveShadow=!0,plane.rotateX(-1.57),plane.position.set(0,0,0),scene.add(torus),scene.add(cube),scene.add(plane);const controls=new OrbitControls(camera,renderer.domElement);window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){const t=clock.getElapsedTime();sphere.position.x=5*Math.sin(t),sphere.position.y=5*Math.abs(Math.sin(t))+5,sphere.position.z=5*Math.cos(t);const a=Math.min(2-Math.abs(Math.sin(t)),7);sphere.scale.set(a,a,a),sphereShadow.position.x=sphere.position.x,sphereShadow.position.z=sphere.position.z,sphereShadow.material.opacity=10-sphere.position.y,sphereShadow.scale.set(a,a,a),helperShadowDir.update(),helperShadowPoint.update(),helperShadowSpot.update(),helperLightDirectional.update(),helperLightPoint.update(),helperLightSpot.update(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();