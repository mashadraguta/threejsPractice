import*as THREE from"three";import{camera,scene,canvas,renderer}from"./basics";import{changeObjPos}from"./utils";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{VertexNormalsHelper}from"three/examples/jsm/helpers/VertexNormalsHelper.js";import{GUI}from"dat.gui";const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("red","yellow","blue"),scene.add(axesHelper);const gui=new GUI({name:"galaxy generator",width:500});console.log(gui);const controls=new OrbitControls(camera,renderer.domElement),initParamsALight={position:{x:3,y:3,z:15},intensity:.5},initParamsBMesh={position:{x:3,y:3,z:15}},loader=new THREE.TextureLoader,cartoonMat=loader.load("/textures/matcaps/1.png");loader.setPath("/textures/particles/");const mat1=loader.load("1.png"),mat2=loader.load("2.png"),mat3=loader.load("3.png"),mat4=loader.load("4.png"),mat5=loader.load("5.png"),mat6=loader.load("6.png"),mat7=loader.load("7.png"),mat8=loader.load("8.png"),mat9=loader.load("9.png"),mat10=loader.load("10.png"),mat11=loader.load("11.png"),mat12=loader.load("12.png"),ambientLight=new THREE.PointLight("yellow",initParamsALight.intensity);ambientLight.position.set(initParamsALight.position.x,initParamsALight.position.y,initParamsALight.position.z),scene.add(ambientLight);const covrig=new THREE.Mesh(new THREE.TorusGeometry,new THREE.MeshToonMaterial({alphaMap:cartoonMat,color:"green"}));covrig.position.set(0,2,2);const GParams={count:100,size:.5,color:!0,radius:2,branches:3};let stars,starMat,bufferGeomParts;const generateGalaxy=(e,a,r)=>{console.log("starMat====>",starMat),stars&&(bufferGeomParts.dispose(),starMat.dispose(),scene.remove(stars)),bufferGeomParts=new THREE.BufferGeometry;let t=new Float32Array(3*e),o=new Float32Array(3*e);for(let a=0;a<3*e;a++){const e=3*a;t[e+0]=THREE.MathUtils.randFloatSpread(10*GParams.radius)/3,t[e+1]=0,t[e+2]=3,o[a]=THREE.MathUtils.randFloatSpread(10)}bufferGeomParts.setAttribute("position",new THREE.BufferAttribute(t,3)),bufferGeomParts.setAttribute("color",new THREE.BufferAttribute(o,3)),starMat=new THREE.PointsMaterial({alphaMap:mat4,vertexColors:r,sizeAttenuation:!0,depthWrite:!1,size:a,transparent:!0}),stars=new THREE.Points(bufferGeomParts,starMat),stars.rotateY(.4*Math.PI),scene.add(stars)};generateGalaxy(GParams.count,GParams.size,GParams.color);const numberOfStars=gui.addFolder("stars number"),sizeOfStars=gui.addFolder("stars size"),colorOfStars=gui.addFolder("color"),radiusOfStars=gui.addFolder("radius");numberOfStars.add(GParams,"count").min(10).max(1e5).step(10).onChange((()=>{generateGalaxy(GParams.count,GParams.size,GParams.color)})),sizeOfStars.add(GParams,"size").min(.01).max(2).step(.01).onChange((()=>{generateGalaxy(GParams.count,GParams.size,GParams.color)})),radiusOfStars.add(GParams,"radius").min(1).max(100).step(.1).onChange((()=>{generateGalaxy(GParams.count,GParams.size,GParams.color)})),colorOfStars.add(GParams,"color").onChange((()=>{generateGalaxy(GParams.count,GParams.size,GParams.color)})),window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){clock.getElapsedTime(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();