import*as THREE from"three";import{camera,scene,renderer}from"./basics";import{getGUIforLights}from"./utils";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("green","purple","orange"),scene.add(axesHelper);const material=new THREE.MeshStandardMaterial,lightParamsDir={position:{x:0,y:10,z:0},radius:1.45,near:.1,far:2e3},lightParamsPoint={position:{x:4,y:6,z:3},radius:.1},lightParamsSpot={position:{x:-4,y:9,z:-3},radius:.1,near:.1,far:2e3,fov:50,distance:.2,angle:.1*Math.PI};renderer.shadowMap.enabled=!0;const ambientLight=new THREE.AmbientLight("white",.2),directionalLight=new THREE.DirectionalLight("white",.5),pointLight=new THREE.PointLight("orange",.7),spotLight=new THREE.SpotLight("white",.9);pointLight.visible=!1,directionalLight.visible=!1,pointLight.castShadow=!0,spotLight.castShadow=!0,directionalLight.castShadow=!0,directionalLight.shadow.camera.left=-10,directionalLight.shadow.camera.right=10,directionalLight.shadow.camera.bottom=-10,directionalLight.shadow.camera.top=10,directionalLight.shadow.camera.near=lightParamsDir.near,directionalLight.shadow.camera.far=lightParamsDir.far,directionalLight.shadow.radius=lightParamsDir.radius,directionalLight.shadow.mapSize.width=1024,directionalLight.shadow.mapSize.height=1024,spotLight.shadow.radius=lightParamsSpot.radius,spotLight.shadow.camera.near=lightParamsSpot.near,spotLight.shadow.camera.far=lightParamsSpot.far,spotLight.shadow.camera.fov=lightParamsSpot.fov,pointLight.shadow.radius=lightParamsPoint.radius;const helperDir=new THREE.CameraHelper(directionalLight.shadow.camera),helperPoint=new THREE.CameraHelper(pointLight.shadow.camera),helperSpot=new THREE.CameraHelper(spotLight.shadow.camera),helperDirectionalLight=new THREE.DirectionalLightHelper(directionalLight);helperDirectionalLight.visible=!1;const helperPointLight=new THREE.PointLightHelper(pointLight),helperSpotLight=new THREE.SpotLightHelper(spotLight);scene.add(helperDirectionalLight),scene.add(helperPointLight),scene.add(helperSpotLight),helperDir.visible=!1,helperPoint.visible=!1,helperSpot.visible=!1,helperPointLight.visible=!1,helperSpotLight.visible=!1,scene.add(helperDir),scene.add(helperPoint),scene.add(helperSpot),getGUIforLights(lightParamsDir,"DIRECTIONAL LIGHT",directionalLight,helperDir),getGUIforLights(lightParamsPoint,"POINT LIGHT",pointLight,helperPoint),getGUIforLights(lightParamsSpot,"SPOT LIGHT",spotLight,helperSpot),scene.add(directionalLight),directionalLight.position.set(8,6,15),scene.add(directionalLight.target),scene.add(ambientLight),scene.add(pointLight),scene.add(spotLight);const sphereG=new THREE.SphereGeometry(3,32,32),sphere=new THREE.Mesh(sphereG,material);sphere.castShadow=!0,sphere.position.set(-5,5,0);const torusG=new THREE.TorusGeometry,torus=new THREE.Mesh(torusG,material);torus.castShadow=!0,torus.position.set(0,5,0);const cubeG=new THREE.BoxGeometry(2,2,2),cube=new THREE.Mesh(cubeG,material);cube.castShadow=!0,cube.position.set(5,5,0);const planeG=new THREE.PlaneGeometry(200,200),planeM=new THREE.MeshStandardMaterial;planeM.side=THREE.DoubleSide;const plane=new THREE.Mesh(planeG,planeM);plane.receiveShadow=!0,plane.rotateX(-1.57),plane.position.set(0,0,0),scene.add(sphere),scene.add(torus),scene.add(cube),scene.add(plane);const controls=new OrbitControls(camera,renderer.domElement);window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){clock.getElapsedTime(),helperDir.update(),helperPoint.update(),helperSpot.update(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();