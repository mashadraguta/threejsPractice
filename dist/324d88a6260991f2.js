import*as THREE from"three";import{camera,scene,canvas,renderer}from"./basics";import{axesHelper}from"./objects";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GUI}from"dat.gui";const gui=new GUI,textureMesh=(new THREE.TextureLoader).load("textures/Grass/Grass.jpg"),materialPlane=new THREE.MeshBasicMaterial({map:textureMesh}),lightParamsPoint={position:{x:5,y:5,z:5}},lightParamsDir={position:{x:5,y:5,z:5}},ambientLight=new THREE.AmbientLight("white",.2),directionalLight=new THREE.DirectionalLight("white",.5),hemisphereLight=new THREE.HemisphereLight("red","green",.3),pointLight=new THREE.PointLight(16748544,.5,0,.3);pointLight.position.set(lightParamsPoint.position.x,lightParamsPoint.position.y,lightParamsPoint.position.z),gui.addFolder("POINT LIGHT"),gui.add(pointLight,"intensity").min(.1).max(10).step(.01),gui.add(lightParamsPoint.position,"x").onChange((()=>{pointLight.position.set(lightParamsPoint.position.x,lightParamsPoint.position.y,lightParamsPoint.position.z)})),gui.add(lightParamsPoint.position,"y").onChange((()=>{pointLight.position.set(lightParamsPoint.position.x,lightParamsPoint.position.y,lightParamsPoint.position.z)})),gui.add(lightParamsPoint.position,"z").onChange((()=>{pointLight.position.set(lightParamsPoint.position.x,lightParamsPoint.position.y,lightParamsPoint.position.z)})),directionalLight.position.set(lightParamsDir.position.x,lightParamsDir.position.y,lightParamsDir.position.z),gui.addFolder("DIRECTIONAL LIGHT "),gui.add(directionalLight,"intensity").min(.1).max(10).step(.01),gui.add(lightParamsDir.position,"x").onChange((()=>{directionalLight.position.set(lightParamsDir.position.x,lightParamsDir.position.y,lightParamsDir.position.z)})),gui.add(lightParamsDir.position,"y").onChange((()=>{directionalLight.position.set(lightParamsDir.position.x,lightParamsDir.position.y,lightParamsDir.position.z)})),gui.add(lightParamsDir.position,"z").onChange((()=>{directionalLight.position.set(lightParamsDir.position.x,lightParamsDir.position.y,lightParamsDir.position.z)})),scene.add(directionalLight),scene.add(pointLight);const material=new THREE.MeshStandardMaterial;material.roughness=.4,material.metalness=.01,material.transparent=!0;const params={color:"#ffffff"};gui.addFolder(" Plane roughness"),gui.add(material,"roughness").min(.01).max(1).step(.01),gui.add(material,"metalness").min(.01).max(1).step(.01),gui.addColor(params,"color").onChange((()=>{material.color=new THREE.Color(params.color)}));const planeG=new THREE.PlaneGeometry(30,40);material.side=THREE.DoubleSide;const plane=new THREE.Mesh(planeG,material);plane.rotateX(-1.5),plane.position.set(0,.5,0);const sphereG=new THREE.SphereGeometry(1,32,32),sphere=new THREE.Mesh(sphereG,material);sphere.position.set(-5,2,-2);const cubeG=new THREE.BoxGeometry(2,2,2,10,10,10),cube=new THREE.Mesh(cubeG,material);cube.position.set(0,5,-2);const torusG=new THREE.TorusGeometry(1,.4,18,48),torus=new THREE.Mesh(torusG,material);torus.position.set(5,2,-2),scene.add(axesHelper),scene.add(plane),scene.add(sphere),scene.add(cube),scene.add(torus);const controls=new OrbitControls(camera,renderer.domElement);window.addEventListener("resize",(i=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(i){const t=clock.getElapsedTime();sphere.rotation.x=.5*t,cube.rotation.x=.5*-t,torus.rotation.x=.5*t,controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();