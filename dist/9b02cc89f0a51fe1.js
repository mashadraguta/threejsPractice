import*as THREE from"three";import{camera,scene,renderer}from"./basics";import{DEMOBOX1,DEMOBOX2,DEMOBOX3,DEMOBOX4}from"./objects";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GUI}from"dat.gui";import{changeObjPos}from"./utils";const axesHelper=new THREE.AxesHelper(2e3),controls=new OrbitControls(camera,renderer.domElement),gui=new GUI;renderer.shadowMap.enabled=!0;const textureLoader=new THREE.TextureLoader,textureGhost=textureLoader.load("textures/testTextures/SGroughness.png");textureLoader.setPath("textures/haunted-house/");const textureWall=textureLoader.load("bricks/color.jpg"),textureGrave=textureLoader.load("grave/1.jpg");textureLoader.setPath("textures/haunted-house/door/");const TDoorColor=textureLoader.load("color.jpg"),TDoorAlpha=textureLoader.load("alpha.jpg"),TDoorAmbientOcclusion=textureLoader.load("ambientOcclusion.jpg"),TDoorHeight=textureLoader.load("height.jpg"),TDoorMetalness=textureLoader.load("metalness.jpg"),TDoorNormal=textureLoader.load("normal.jpg"),TDoorRoughness=textureLoader.load("roughness.jpg");textureLoader.setPath("textures/haunted-house/bricks/");const TBrickAO=textureLoader.load("ambientOcclusion.jpg"),TBrickColor=textureLoader.load("color.jpg"),TBrickNormal=textureLoader.load("normal.jpg"),TBrickRoughness=textureLoader.load("roughness.jpg");textureLoader.setPath("textures/haunted-house/grass/");const TGrassAO=textureLoader.load("ambientOcclusion.jpg"),TGrassColor=textureLoader.load("color.jpg"),TGrassNormal=textureLoader.load("normal.jpg"),TGrassRoughness=textureLoader.load("roughness.jpg");TGrassAO.wrapS=THREE.RepeatWrapping,TGrassColor.wrapS=THREE.RepeatWrapping,TGrassNormal.wrapS=THREE.RepeatWrapping,TGrassRoughness.wrapS=THREE.RepeatWrapping,TGrassAO.wrapT=THREE.RepeatWrapping,TGrassColor.wrapT=THREE.RepeatWrapping,TGrassNormal.wrapT=THREE.RepeatWrapping,TGrassRoughness.wrapT=THREE.RepeatWrapping;const number=10;TGrassAO.repeat.set(10,10),TGrassColor.repeat.set(10,10),TGrassNormal.repeat.set(10,10),TGrassRoughness.repeat.set(10,10);const initParams={position:{x:0,y:2.5,z:0},scale:1,rotateX:0,rotateY:0},initParamsMoon={position:{x:-15,y:13,z:10},intensity:.8},initParamsFarol={position:{x:-6.7,y:1.5,z:0},intensity:.8},farolLight=new THREE.PointLight("#ff7d46",.5,20),moonLight=new THREE.DirectionalLight("#506886",.5),ambientLight=new THREE.AmbientLight("#506886",.2),farolLightHelper=new THREE.PointLightHelper(farolLight),moonLightHelper=new THREE.PointLightHelper(moonLight);scene.add(moonLightHelper),farolLight.castShadow=!0,moonLight.castShadow=!0,moonLight.position.set(initParamsMoon.position.x,initParamsMoon.position.y,initParamsMoon.position.z),farolLight.position.set(initParamsFarol.position.x,initParamsFarol.position.y,initParamsFarol.position.z),scene.add(ambientLight,moonLight),changeObjPos(moonLight,initParamsMoon,gui,"moon light"),changeObjPos(farolLight,initParamsFarol,gui,"farol light");const ghost1Light=new THREE.PointLight("#9ca5e1",2,10),ghost1LightHelper=new THREE.PointLightHelper(ghost1Light),ghost2Light=new THREE.PointLight("green",2,15),ghost2LightHelper=new THREE.PointLightHelper(ghost2Light),ghostShape1=new THREE.Mesh(new THREE.BoxGeometry(3,3),new THREE.MeshStandardMaterial({map:textureGhost,transparent:!0,color:"red",opacity:.3})),ghostShape2=new THREE.Mesh(new THREE.SphereGeometry(1,16,32),new THREE.MeshStandardMaterial({map:textureGhost,transparent:!0,opacity:.4})),ghost1=new THREE.Group,ghost2=new THREE.Group;ghost1.add(ghost1Light,ghostShape1),ghost2.add(ghost2Light,ghostShape2),ghost1.position.set(10,10,2),ghost2.position.set(-25,3,5),scene.add(ghost1,ghost2);const fog=new THREE.Fog(2500663,0,50);console.log("FOG =======>",fog),scene.fog=fog;const wallMat=new THREE.MeshStandardMaterial({map:TBrickColor,aoMap:TBrickAO,normalMap:TBrickNormal,roughnessMap:TBrickRoughness,transparent:!0}),grassMat=new THREE.MeshStandardMaterial({map:TGrassColor,aoMap:TGrassAO,normalMap:TGrassNormal,roughnessMap:TGrassRoughness,transparent:!0}),doorMat=new THREE.MeshStandardMaterial({map:TDoorColor,alphaMap:TDoorAlpha,aoMap:TDoorAmbientOcclusion,displacementMap:TDoorHeight,displacementScale:.1,normalMap:TDoorNormal,metalnessMap:TDoorMetalness,roughnessMap:TDoorRoughness,transparent:!0}),roofMat=new THREE.MeshStandardMaterial({color:"#148785"}),bushMat=new THREE.MeshStandardMaterial({color:"#148731"}),hauntedHouse=new THREE.Group,walls=new THREE.Mesh(new THREE.BoxGeometry(10,5,10,100,100),wallMat),roof=new THREE.Mesh(new THREE.ConeGeometry(8,2.5,4),roofMat),door=new THREE.Mesh(new THREE.PlaneGeometry(3.3,3.3,16,16),doorMat),bush=new THREE.Mesh(new THREE.SphereGeometry(.5,16,32),bushMat);door.geometry.setAttribute("uv2",new THREE.BufferAttribute(door.geometry.attributes.uv.array,2)),walls.geometry.setAttribute("uv2",new THREE.BufferAttribute(walls.geometry.attributes.uv.array,2));const bush1=bush.clone(),bush2=bush.clone(),bush3=bush.clone(),bush4=bush.clone();bush1.position.set(-5.5,-2,4),bush2.position.set(-5.5,-2,-3),bush4.position.set(-5.5,-2,-4),bush3.position.set(-5.5,-2,2.5),bush2.scale.set(1.75,1.75,1.75),bush4.scale.set(2.5,2.5,2.5),bush1.scale.set(2.5,2.5,2.5),roof.rotateY(.25*Math.PI),roof.position.set(0,3.5,0),door.rotateY(.5*-Math.PI),door.position.set(-5.1,-1,0);const graves=new THREE.Group,demoCircleBig=new THREE.Mesh(new THREE.CircleGeometry(40,32),new THREE.MeshBasicMaterial({wireframe:!0})),demoCircleSmall=new THREE.Mesh(new THREE.CircleGeometry(7,32),new THREE.MeshBasicMaterial({wireframe:!0}));demoCircleBig.position.set(0,1,0),demoCircleSmall.position.set(0,1.2,0),demoCircleBig.rotateX(.5*-Math.PI),demoCircleSmall.rotateX(.5*-Math.PI),demoCircleBig.visible=!1,demoCircleSmall.visible=!1,demoCircleBig.geometry.computeBoundingSphere(),demoCircleSmall.geometry.computeBoundingSphere(),scene.add(demoCircleBig),scene.add(demoCircleSmall);const graveGeom=new THREE.BoxGeometry(1,3,1.3),graveMat=new THREE.MeshStandardMaterial({map:textureGrave});for(let e=0;e<=100;e++){const e=[],o=[],t=new THREE.Mesh(graveGeom,graveMat);t.castShadow=!0,t.position.set(THREE.MathUtils.randFloatSpread(100),-1.5,THREE.MathUtils.randFloatSpread(100));const a=demoCircleBig.geometry.boundingSphere,r=demoCircleSmall.geometry.boundingSphere;a.containsPoint(t.position)&&!r.containsPoint(t.position)?e.push(t):o.push(t),e.forEach((e=>{e.rotateX(Math.PI*THREE.MathUtils.randFloatSpread(1e3))})),graves.add(...e)}hauntedHouse.add(walls,roof,door,bush1,bush2,bush3,bush4,graves,farolLight),hauntedHouse.position.set(initParams.position.x,initParams.position.y,initParams.position.z),hauntedHouse.rotateX(initParams.rotateX),hauntedHouse.rotateY(initParams.rotateY),changeObjPos(hauntedHouse,initParams,gui,"group position"),changeObjPos(roof,initParams,gui,"roof position");const plane=new THREE.Mesh(new THREE.PlaneGeometry(100,100,50,50),grassMat);plane.geometry.setAttribute("uv2",new THREE.BufferAttribute(plane.geometry.attributes.uv.array,2)),plane.geometry.rotateX(.5*-Math.PI),plane.receiveShadow=!0,roof.castShadow=!0,walls.castShadow=!0,hauntedHouse.castShadow=!0,scene.add(axesHelper),scene.add(plane),scene.add(moonLight),scene.add(hauntedHouse),window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){const o=clock.getElapsedTime();ghost1.position.x=10*Math.sin(o),ghost1.position.z=10*Math.cos(o),ghost2.position.x-=.3*Math.sin(o),farolLightHelper.update(),moonLightHelper.update(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();