import*as THREE from"three";import{camera,scene,renderer}from"./basics";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{GUI}from"dat.gui";import{RectAreaLightHelper}from"three/examples/jsm/helpers/RectAreaLightHelper.js";const axesHelper=new THREE.AxesHelper(2e3);axesHelper.setColors("green","purple","orange");const gui=new GUI,lightParamsPoint={position:{x:-.8,y:2.5,z:2.5}},lightParamsDir={position:{x:40,y:2.5,z:8}},lightParamsSpot={position:{x:-12,y:8,z:3},angle:.3*Math.PI,distance:0},lightParamsRect={position:{x:5.8,y:2.5,z:14.6}},ambientLight=new THREE.AmbientLight("white",.2),hemisphereLight=new THREE.HemisphereLight(16740129,"green",.1),pointLight=new THREE.PointLight(16768545,.3,lightParamsSpot.distance,.1),directionalLight=new THREE.DirectionalLight("white",.8),spotLight=new THREE.SpotLight("white",.6,0,lightParamsSpot.angle,.25,1),rectLight=new THREE.RectAreaLight("white",.9,20,20);pointLight.visible=!1,spotLight.visible=!0,rectLight.visible=!1,hemisphereLight.visible=!1,directionalLight.visible=!1;const rectHelper=new RectAreaLightHelper(rectLight),pointHelper=new THREE.PointLightHelper(pointLight),hemisphereHelper=new THREE.HemisphereLightHelper(hemisphereLight,.5),directionalHelper=new THREE.DirectionalLightHelper(directionalLight),spotHelper=new THREE.SpotLightHelper(spotLight);rectHelper.visible=!1,pointHelper.visible=!1,hemisphereHelper.visible=!1,directionalHelper.visible=!1,spotHelper.visible=!1,scene.add(ambientLight),scene.add(rectHelper),scene.add(hemisphereHelper),scene.add(pointHelper),scene.add(directionalHelper),scene.add(spotHelper);const getGUIforLights=(e,t,i,r)=>{const n=e.position;i.position.set(n.x,n.y,n.z);const s=gui.addFolder(t);s.add(i,"intensity").min(.1).max(2).step(.01),s.add(i,"visible"),r&&s.add(r,"visible").name("helper"),s.add(n,"x").min(-50).max(50).step(.1).onChange((()=>{i.position.set(n.x,n.y,n.z)})),s.add(n,"y").min(-50).max(50).step(.1).onChange((()=>{i.position.set(n.x,n.y,n.z)})),s.add(n,"z").min(-50).max(50).step(.1).onChange((()=>{i.position.set(n.x,n.y,n.z)})),i==spotLight&&(s.add(i,"angle").min(.1*Math.PI).max(2*Math.PI).step(.01),s.add(i,"distance").min(0).max(10).step(.01))};getGUIforLights(lightParamsPoint,"POINT LIGHT",pointLight,pointHelper),getGUIforLights(lightParamsDir,"DIRECTIONAL LIGHT",directionalLight,directionalHelper),getGUIforLights(lightParamsSpot,"SPOT LIGHT",spotLight,spotHelper),getGUIforLights(lightParamsRect,"RECT LIGHT",rectLight,rectHelper);const ambientFolder=gui.addFolder("AMBIENT LIGHT"),hemisphereFolder=gui.addFolder("HEMISPHERE LIGHT");ambientFolder.add(ambientLight,"visible"),hemisphereFolder.add(hemisphereLight,"visible").name("LIGHT"),hemisphereFolder.add(hemisphereHelper,"visible").name("HELPER"),scene.add(spotLight),scene.add(spotLight.target),scene.add(directionalLight),scene.add(pointLight),scene.add(spotLight),scene.add(rectLight),scene.add(hemisphereLight),scene.add(axesHelper);const material=new THREE.MeshStandardMaterial;material.roughness=.4,material.metalness=.01,material.transparent=!0;const planeG=new THREE.PlaneGeometry(30,40);material.side=THREE.DoubleSide;const plane=new THREE.Mesh(planeG,material);plane.rotateX(-1.5),plane.position.set(0,.5,0);const sphereG=new THREE.SphereGeometry(1,32,32),sphere=new THREE.Mesh(sphereG,material);sphere.position.set(-5,5,-2);const cubeG=new THREE.BoxGeometry(2,2,2),cube=new THREE.Mesh(cubeG,material);cube.position.set(0,10,-4);const torusG=new THREE.TorusGeometry(1,.4,18,48),torus=new THREE.Mesh(torusG,material);torus.position.set(5,5,-2),scene.add(sphere),scene.add(cube),scene.add(torus),scene.add(plane);const controls=new OrbitControls(camera,renderer.domElement);window.addEventListener("resize",(e=>{camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));const clock=new THREE.Clock;function render(e){const t=clock.getElapsedTime();sphere.rotation.x=.5*t,cube.rotation.x=.5*t,torus.rotation.x=.5*t,spotHelper.update(),controls.update(),window.requestAnimationFrame(render),renderer.render(scene,camera)}render();